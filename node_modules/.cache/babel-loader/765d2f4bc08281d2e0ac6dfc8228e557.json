{"ast":null,"code":"import _classCallCheck from \"/home/naveen/Documents/git-commands/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/naveen/Documents/git-commands/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/naveen/Documents/git-commands/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/naveen/Documents/git-commands/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/naveen/Documents/git-commands/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/naveen/Documents/git-commands/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/naveen/Documents/git-commands/src/Components/Card/CardNew.jsx\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'reactstrap';\nvar git = [{\n  cli: \"git init\",\n  usage: \"git init [repository name]\",\n  description: \"This command is used to start a new repository.\",\n  id: '1'\n}, {\n  cli: \"git clone\",\n  usage: \"git clone [url] \",\n  description: \"This command is used to obtain a repository from an existing URL.\",\n  id: '2'\n}, {\n  cli: \"git add\",\n  usage: \"git add [file]\",\n  description: \"This command adds a file to the staging area.\",\n  id: '3'\n}, {\n  cli: \"Naveen\",\n  usage: \"Useless\",\n  description: \"Dead\",\n  id: '4'\n}];\n\nfunction searchingFor(term) {\n  return function (x) {\n    return x.cli.toLowerCase().includes(term.toLowerCase()) || !term;\n  };\n}\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, props));\n    _this.state = {\n      git: git,\n      term: ''\n    };\n    _this.searchHandler = _this.searchHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"searchHandler\",\n    value: function searchHandler(event) {\n      this.setState({\n        term: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          term = _this$state.term,\n          git = _this$state.git;\n      return React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 56\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 57\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"Search\",\n        id: \"search\",\n        placeholder: \"TYPE GIT COMMANDS HERE\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        spellCheck: \"false\",\n        onChange: this.searchHandler,\n        value: term,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58\n        },\n        __self: this\n      })), git.filter(searchingFor(term)).map(function (github) {\n        return React.createElement(Col, {\n          key: github.id,\n          className: \"card\",\n          sm: \"12\",\n          md: \"6\",\n          lg: \"4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 71\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 72\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"Clickbutton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 73\n          },\n          __self: this\n        }, github.cli), React.createElement(\"code\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 74\n          },\n          __self: this\n        }, github.usage), React.createElement(\"p\", {\n          className: \"card-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 75\n          },\n          __self: this\n        }, github.description)));\n      }));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nexport default Search;","map":{"version":3,"sources":["/home/naveen/Documents/git-commands/src/Components/Card/CardNew.jsx"],"names":["React","Component","Col","Row","git","cli","usage","description","id","searchingFor","term","x","toLowerCase","includes","Search","props","state","searchHandler","bind","event","setState","target","value","filter","map","github"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Col, Row } from 'reactstrap';\n\nconst git = [\n  {\n    cli: \"git init\",\n    usage: \"git init [repository name]\",\n    description: \"This command is used to start a new repository.\",\n    id: '1'\n  },\n  {\n    cli: \"git clone\",\n    usage: \"git clone [url] \",\n    description: \"This command is used to obtain a repository from an existing URL.\",\n    id: '2'\n  },\n  {\n    cli: \"git add\",\n    usage: \"git add [file]\",\n    description: \"This command adds a file to the staging area.\",\n    id: '3'\n  },\n  {\n    cli: \"Naveen\",\n    usage: \"Useless\",\n    description: \"Dead\",\n    id:'4',\n  }\n]\n\nfunction searchingFor(term){\n  return function(x){\n    return x.cli.toLowerCase().includes(term.toLowerCase()) || !term;\n  }\n}\n\nclass Search extends Component {\n  constructor(props){\n    super(props);\n\n      this.state = {\n        git: git,\n        term: '',\n      }\n\n      this.searchHandler = this.searchHandler.bind(this);\n  }\n\n  searchHandler(event){\n    this.setState({ term: event.target.value })\n  }\n\n  render() {\n    const { term, git } = this.state;\n    return(\n      <Row>\n        <form>\n           <input type=\"text\"\n             name=\"Search\"\n             id=\"search\"\n             placeholder=\"TYPE GIT COMMANDS HERE\"\n             autoCorrect=\"off\"\n             autoCapitalize=\"off\"\n             spellCheck=\"false\"\n                  onChange={this.searchHandler}\n                  value={term}\n          />\n        </form>\n        {\n          git.filter(searchingFor(term)).map( github =>\n              <Col  key={github.id} className=\"card\" sm=\"12\" md=\"6\" lg=\"4\">\n                <div  className=\"card-body\">\n                  <p className=\"Clickbutton\">{github.cli}</p>\n                    <code>{github.usage}</code>\n                  <p className=\"card-text\">{github.description}</p>\n                </div>\n              </Col>\n          )\n        }\n      </Row>\n    );\n  }\n}\n\nexport default Search;\n"]},"metadata":{},"sourceType":"module"}