{"ast":null,"code":"import _classCallCheck from \"/mnt/c/Users/Harsh/Downloads/Git-Commands/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/mnt/c/Users/Harsh/Downloads/Git-Commands/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/mnt/c/Users/Harsh/Downloads/Git-Commands/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/mnt/c/Users/Harsh/Downloads/Git-Commands/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/mnt/c/Users/Harsh/Downloads/Git-Commands/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/mnt/c/Users/Harsh/Downloads/Git-Commands/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/mnt/c/Users/Harsh/Downloads/Git-Commands/src/Components/Card/Card.jsx\";\nimport React, { Component } from 'react';\nimport { Col, Row } from 'reactstrap';\nvar git = [{\n  cli: \"git version\",\n  usage: \"git --version\",\n  description: \"This command is used to check the git version.\",\n  id: '1'\n}, {\n  cli: \"git config --global user.name\",\n  usage: \"git config --global user.name \\\"Harsh Trivedi\\\"\",\n  description: \"This command is used define the username of the git user globally.\",\n  id: '2'\n}, {\n  cli: \"git config --global user.email\",\n  usage: \"git config --global user.email user@email.com\",\n  description: \"This command is used define the email of the git user globally.\",\n  id: '3'\n}, {\n  cli: \"git init\",\n  usage: \"git init\",\n  description: \"This command is used to initialize a directory.\",\n  id: '4'\n}, {\n  cli: \"git clone\",\n  usage: \"git clone [/path/to/repository]\",\n  description: \"This command is used to initialize a directory.\",\n  id: '5'\n}, {\n  cli: \"git status\",\n  usage: \"git status\",\n  description: \"This command is used to check status.\",\n  id: '6'\n}, {\n  cli: \"git add\",\n  usage: \"git add *\",\n  description: \"Add files to staging(index)\",\n  id: '7'\n}, {\n  cli: \"git add\",\n  usage: \"git add [file-name.jsx]\",\n  description: \"Add a file to the staging area.\",\n  id: '8'\n}, {\n  cli: \"git add -A\",\n  usage: \"git add -A\",\n  description: \"Add all new and changed files to the staging area.\",\n  id: '9'\n}, {\n  cli: \"git commit -m\",\n  usage: \"git commit -m [commit message]\",\n  description: \"Commit changes to you repository with a message.\",\n  id: '10'\n}, {\n  cli: \"git rm -r\",\n  usage: \"git rm -r [file-name.jsx]\",\n  description: \"Remove a file (or folder) from your repository.\",\n  id: '11'\n}, {\n  cli: \"git pull origin\",\n  usage: \"git pull origin [branch-name]\",\n  description: \"To pull a specific branch from github repository.\",\n  id: '12'\n}, {\n  cli: \"git push origin\",\n  usage: \"git push origin [branch-name]\",\n  description: \"To push a specific branch from github repository.\",\n  id: '13'\n}, {\n  cli: \"git checkout -b\",\n  usage: \"git checkout -b [branchname]\",\n  description: \"Create a new branch and switch to it.\",\n  id: '14'\n}, {\n  cli: \"git checkout\",\n  usage: \"git checkout\",\n  description: \"Switch from one branch to another.\",\n  id: '15'\n}, {\n  cli: \"git branch\",\n  usage: \"git branch\",\n  description: \"This command lists all the branches in the repo and also tells the current branch.\",\n  id: '16'\n}, {\n  cli: \"git branch -d\",\n  usage: \"git branch -d [branchname]\",\n  description: \"This commands deleted the branch\",\n  id: '17'\n}, {\n  cli: \"git push all\",\n  usage: \"git push --all origin\",\n  description: \"Pushes all branches to the remote repository\",\n  id: '18'\n}, {\n  cli: \"git merge\",\n  usage: \"git merge [branchname]\",\n  description: \"This command merges different branch into the active branch.\",\n  id: '19'\n}, {\n  cli: \"git diff\",\n  usage: \"git diff\",\n  description: \"This command shows all the merge conflicts\",\n  id: '20'\n}, {\n  cli: \"git diff filename\",\n  usage: \"git diff --base [filename]\",\n  description: \"This command shows all the merge conflicts against the base file.\",\n  id: '21'\n}, {\n  cli: \"git diff filename\",\n  usage: \"git diff [source branch] [target branch]\",\n  description: \"This command shows preview before merging.\",\n  id: '22'\n}, {\n  cli: \"git tag\",\n  usage: \"git tag 1.0.0 [commit ID]\",\n  description: \"This command marks a significant change-set, such as a release.\",\n  id: '23'\n}, {\n  cli: \"git log\",\n  usage: \"git log\",\n  description: \"This command shows the commit logs[history]\",\n  id: '24'\n}, {\n  cli: \"git fetch\",\n  usage: \"git fetch origin\",\n  description: \"This command fetch all the latest commits and thus, you don't have to drop all the local changes.\",\n  id: '25'\n}];\n\nfunction searchingFor(term) {\n  return function (x) {\n    return x.cli.toLowerCase().includes(term.toLowerCase()) || !term;\n  };\n}\n\nvar Search =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Search, _Component);\n\n  function Search(props) {\n    var _this;\n\n    _classCallCheck(this, Search);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Search).call(this, props));\n    _this.state = {\n      git: git,\n      term: ''\n    };\n    _this.searchHandler = _this.searchHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(Search, [{\n    key: \"searchHandler\",\n    value: function searchHandler(event) {\n      this.setState({\n        term: event.target.value\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this$state = this.state,\n          term = _this$state.term,\n          git = _this$state.git;\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 159\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        name: \"Search\",\n        id: \"search\",\n        placeholder: \"TYPE GIT COMMANDS HERE\",\n        autoComplete: \"off\",\n        autoCorrect: \"off\",\n        autoCapitalize: \"off\",\n        spellCheck: \"false\",\n        onChange: this.searchHandler,\n        value: term,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 160\n        },\n        __self: this\n      })), React.createElement(Row, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 162\n        },\n        __self: this\n      }, git.filter(searchingFor(term)).map(function (github) {\n        return React.createElement(Col, {\n          key: github.id,\n          className: \"card\",\n          sm: \"12\",\n          md: \"6\",\n          lg: \"4\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 164\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          className: \"card-body\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 165\n          },\n          __self: this\n        }, React.createElement(\"p\", {\n          className: \"Clickbutton\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 166\n          },\n          __self: this\n        }, github.cli), React.createElement(\"code\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 167\n          },\n          __self: this\n        }, github.usage), React.createElement(\"p\", {\n          className: \"card-text\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 168\n          },\n          __self: this\n        }, github.description)));\n      })));\n    }\n  }]);\n\n  return Search;\n}(Component);\n\nexport default Search;","map":{"version":3,"sources":["/mnt/c/Users/Harsh/Downloads/Git-Commands/src/Components/Card/Card.jsx"],"names":["React","Component","Col","Row","git","cli","usage","description","id","searchingFor","term","x","toLowerCase","includes","Search","props","state","searchHandler","bind","event","setState","target","value","filter","map","github"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\r\nimport {Col, Row} from 'reactstrap';\r\n\r\nconst git = [\r\n  {\r\n    cli: \"git version\",\r\n    usage: \"git --version\",\r\n    description: \"This command is used to check the git version.\",\r\n    id: '1'\r\n  }, {\r\n    cli: \"git config --global user.name\",\r\n    usage: \"git config --global user.name \\\"Harsh Trivedi\\\"\",\r\n    description: \"This command is used define the username of the git user globally.\",\r\n    id: '2'\r\n  }, {\r\n    cli: \"git config --global user.email\",\r\n    usage: \"git config --global user.email user@email.com\",\r\n    description: \"This command is used define the email of the git user globally.\",\r\n    id: '3'\r\n  }, {\r\n    cli: \"git init\",\r\n    usage: \"git init\",\r\n    description: \"This command is used to initialize a directory.\",\r\n    id: '4'\r\n  }, {\r\n    cli: \"git clone\",\r\n    usage: \"git clone [/path/to/repository]\",\r\n    description: \"This command is used to initialize a directory.\",\r\n    id: '5'\r\n  }, {\r\n    cli: \"git status\",\r\n    usage: \"git status\",\r\n    description: \"This command is used to check status.\",\r\n    id: '6'\r\n  }, {\r\n    cli: \"git add\",\r\n    usage: \"git add *\",\r\n      description: \"Add files to staging(index)\",\r\n    id: '7'\r\n  }, {\r\n    cli: \"git add\",\r\n    usage: \"git add [file-name.jsx]\",\r\n    description: \"Add a file to the staging area.\",\r\n    id: '8'\r\n  }, {\r\n    cli: \"git add -A\",\r\n    usage: \"git add -A\",\r\n    description: \"Add all new and changed files to the staging area.\",\r\n    id: '9'\r\n  }, {\r\n    cli: \"git commit -m\",\r\n    usage: \"git commit -m [commit message]\",\r\n    description: \"Commit changes to you repository with a message.\",\r\n    id: '10'\r\n  }, {\r\n    cli: \"git rm -r\",\r\n    usage: \"git rm -r [file-name.jsx]\",\r\n    description: \"Remove a file (or folder) from your repository.\",\r\n    id: '11'\r\n  }, {\r\n    cli: \"git pull origin\",\r\n    usage: \"git pull origin [branch-name]\",\r\n    description: \"To pull a specific branch from github repository.\",\r\n    id: '12'\r\n  }, {\r\n    cli: \"git push origin\",\r\n    usage: \"git push origin [branch-name]\",\r\n    description: \"To push a specific branch from github repository.\",\r\n    id: '13'\r\n  }, {\r\n    cli: \"git checkout -b\",\r\n    usage: \"git checkout -b [branchname]\",\r\n    description: \"Create a new branch and switch to it.\",\r\n    id: '14'\r\n  }, {\r\n    cli: \"git checkout\",\r\n    usage: \"git checkout\",\r\n    description: \"Switch from one branch to another.\",\r\n    id: '15'\r\n  }, {\r\n    cli: \"git branch\",\r\n    usage: \"git branch\",\r\n    description: \"This command lists all the branches in the repo and also tells the current branch.\",\r\n    id: '16'\r\n  }, {\r\n    cli: \"git branch -d\",\r\n    usage: \"git branch -d [branchname]\",\r\n    description: \"This commands deleted the branch\",\r\n    id: '17'\r\n  }, {\r\n    cli: \"git push all\",\r\n    usage: \"git push --all origin\",\r\n    description: \"Pushes all branches to the remote repository\",\r\n    id: '18'\r\n  }, {\r\n    cli: \"git merge\",\r\n    usage: \"git merge [branchname]\",\r\n    description: \"This command merges different branch into the active branch.\",\r\n    id: '19'\r\n  }, {\r\n    cli: \"git diff\",\r\n    usage: \"git diff\",\r\n    description: \"This command shows all the merge conflicts\",\r\n    id: '20'\r\n  }, {\r\n    cli: \"git diff filename\",\r\n    usage: \"git diff --base [filename]\",\r\n    description: \"This command shows all the merge conflicts against the base file.\",\r\n    id: '21'\r\n  }, {\r\n    cli: \"git diff filename\",\r\n    usage: \"git diff [source branch] [target branch]\",\r\n    description: \"This command shows preview before merging.\",\r\n    id: '22'\r\n  }, {\r\n    cli: \"git tag\",\r\n    usage: \"git tag 1.0.0 [commit ID]\",\r\n    description: \"This command marks a significant change-set, such as a release.\",\r\n    id: '23'\r\n  }, {\r\n    cli: \"git log\",\r\n    usage: \"git log\",\r\n    description: \"This command shows the commit logs[history]\",\r\n    id: '24'\r\n  }, {\r\n    cli: \"git fetch\",\r\n    usage: \"git fetch origin\",\r\n    description: \"This command fetch all the latest commits and thus, you don't have to drop all the local changes.\",\r\n    id: '25'\r\n  },\r\n]\r\n\r\nfunction searchingFor(term) {\r\n  return function(x) {\r\n    return x.cli.toLowerCase().includes(term.toLowerCase()) || !term;\r\n  }\r\n}\r\n\r\nclass Search extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      git: git,\r\n      term: ''\r\n    }\r\n\r\n    this.searchHandler = this.searchHandler.bind(this);\r\n  }\r\n\r\n  searchHandler(event) {\r\n    this.setState({term: event.target.value})\r\n  }\r\n\r\n  render() {\r\n    const {term, git} = this.state;\r\n    return (\r\n      <div>\r\n        <form>\r\n          <input type=\"text\" name=\"Search\" id=\"search\" placeholder=\"TYPE GIT COMMANDS HERE\" autoComplete=\"off\" autoCorrect=\"off\" autoCapitalize=\"off\" spellCheck=\"false\" onChange={this.searchHandler} value={term}/>\r\n        </form>\r\n      <Row>\r\n      {\r\n        git.filter(searchingFor(term)).map(github => <Col key={github.id} className=\"card\" sm=\"12\" md=\"6\" lg=\"4\">\r\n          <div className=\"card-body\">\r\n            <p className=\"Clickbutton\">{github.cli}</p>\r\n            <code>{github.usage}</code>\r\n            <p className=\"card-text\">{github.description}</p>\r\n          </div>\r\n        </Col>)\r\n      }\r\n    </Row>\r\n  </div>\r\n  );\r\n  }\r\n}\r\n\r\nexport default Search;\r\n"]},"metadata":{},"sourceType":"module"}